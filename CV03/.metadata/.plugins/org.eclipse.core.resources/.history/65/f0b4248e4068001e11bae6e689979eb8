/*
 * sct.c
 *
 *  Created on: Oct 11, 2023
 *      Author: xcaban01
 */
#include "sct.h"

//void sct_init(void){
//}

//void sct_led(uint32_t value){
//}

//void sct_value(uint16_t value){
//}

void sct_init(void) {
    HAL_GPIO_WritePin(SCT_NOE_GPIO_Port, SCT_NOE_Pin, GPIO_PIN_SET); // Set NOE high (turn off output)
    HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, GPIO_PIN_RESET); // Initialize CLK pin to low
    HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, GPIO_PIN_RESET); // Initialize SDI pin to low
}

void sct_led(uint32_t value) {
    HAL_GPIO_WritePin(SCT_NOE_GPIO_Port, SCT_NOE_Pin, GPIO_PIN_RESET); // Enable output

    for(int i = 0; i < 32; i++) {
        HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, (value & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Write SDI
        HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, GPIO_PIN_SET); // Toggle CLK
        HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, GPIO_PIN_RESET);
    }

    HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, GPIO_PIN_SET); // Latch data
    HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, GPIO_PIN_RESET);
}

void sct_value(uint16_t value){

	static const uint32_t reg_values[3][10] = {
	{
	//PCDE--------GFAB @ DIS1
	0b0111000000000111 << 16,
	0b0100000000000001 << 16,
	0b0011000000001011 << 16,
	0b0110000000001011 << 16,
	0b0100000000001101 << 16,
	0b0110000000001110 << 16,
	0b0111000000001110 << 16,
	0b0100000000000011 << 16,
	0b0111000000001111 << 16,
	0b0110000000001111 << 16,
	},

	{
	//----PCDEGFAB---- @ DIS2
	0b0000011101110000 << 0,
	0b0000010000010000 << 0,
	0b0000001110110000 << 0,
	0b0000011010110000 << 0,
	0b0000010011010000 << 0,
	0b0000011011100000 << 0,
	0b0000011111100000 << 0,
	0b0000010000110000 << 0,
	0b0000011111110000 << 0,
	0b0000011011110000 << 0,
	},

	{
	//PCDE--------GFAB @ DIS3
	0b0111000000000111 << 0,
	0b0100000000000001 << 0,
	0b0011000000001011 << 0,
	0b0110000000001011 << 0,
	0b0100000000001101 << 0,
	0b0110000000001110 << 0,
	0b0111000000001110 << 0,
	0b0100000000000011 << 0,
	0b0111000000001111 << 0,
	0b0110000000001111 << 0,
	},
	};

	//position of hundreds
	reg |= reg_values[0][value / 100 % 10];

	//position of tents
	reg |= reg_values[0][value / 10 % 10];

	//position of ones
	reg |= reg_values[0][value / 1 % 10];
}
